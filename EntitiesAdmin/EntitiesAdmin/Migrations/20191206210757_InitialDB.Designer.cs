// <auto-generated />
using System;
using EntitiesAdmin.Data.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EntitiesAdmin.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20191206210757_InitialDB")]
    partial class InitialDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EntitiesAdmin.Data.Entities.Countries", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("EditionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("StatusFieldId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CountryId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UName");

                    b.HasIndex("StatusFieldId");

                    b.HasIndex("UserId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("EntitiesAdmin.Data.Entities.Departments", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("EditionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("RosterId")
                        .HasColumnType("int");

                    b.Property<int?>("StatusFieldId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DepartmentId");

                    b.HasIndex("RosterId");

                    b.HasIndex("StatusFieldId");

                    b.HasIndex("UserId");

                    b.HasIndex("RosterId", "Name")
                        .IsUnique()
                        .HasName("URosterIdName");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("EntitiesAdmin.Data.Entities.Employees", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FirstSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("JobPositionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LowDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("SecondSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("SiteId")
                        .HasColumnType("int");

                    b.Property<int?>("SkillId")
                        .HasColumnType("int");

                    b.Property<int?>("StatusEmployeeId")
                        .HasColumnType("int");

                    b.HasKey("EmployeeId");

                    b.HasIndex("CountryId");

                    b.HasIndex("EmployeeCode")
                        .IsUnique()
                        .HasName("UEmployeeCodeEmployees");

                    b.HasIndex("JobPositionId");

                    b.HasIndex("SiteId");

                    b.HasIndex("SkillId");

                    b.HasIndex("StatusEmployeeId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("EntitiesAdmin.Data.Entities.JobPositions", b =>
                {
                    b.Property<int>("PositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EditionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("StatusFieldId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PositionId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UNameJobpositions");

                    b.HasIndex("StatusFieldId");

                    b.HasIndex("UserId");

                    b.ToTable("JobPositions");
                });

            modelBuilder.Entity("EntitiesAdmin.Data.Entities.RequestCategories", b =>
                {
                    b.Property<int>("RequestCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EditionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("StatusFieldId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RequestCategoryId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UNameRequestCategories");

                    b.HasIndex("StatusFieldId");

                    b.HasIndex("UserId");

                    b.ToTable("RequestCategories");
                });

            modelBuilder.Entity("EntitiesAdmin.Data.Entities.Requests", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusRequestId")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("TypeRequestId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RequestId");

                    b.HasIndex("StatusRequestId");

                    b.HasIndex("TypeRequestId");

                    b.HasIndex("UserId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("EntitiesAdmin.Data.Entities.Rosters", b =>
                {
                    b.Property<int>("RosterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EditionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("StatusFieldId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RosterId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UNameRoster");

                    b.HasIndex("StatusFieldId");

                    b.HasIndex("UserId");

                    b.ToTable("Rosters");
                });

            modelBuilder.Entity("EntitiesAdmin.Data.Entities.Site", b =>
                {
                    b.Property<int>("SiteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("StatusFieldId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SiteId");

                    b.HasIndex("CountryId");

                    b.HasIndex("StatusFieldId");

                    b.HasIndex("UserId");

                    b.HasIndex("CountryId", "Name")
                        .IsUnique()
                        .HasName("UName_CountryID_Site")
                        .HasFilter("[CountryId] IS NOT NULL AND [Name] IS NOT NULL");

                    b.ToTable("Site");
                });

            modelBuilder.Entity("EntitiesAdmin.Data.Entities.Skills", b =>
                {
                    b.Property<int>("SkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EditionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("StatusFieldId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SkillId");

                    b.HasIndex("DepartmentId")
                        .HasName("IX_Skills_DepartmentID_Name");

                    b.HasIndex("StatusFieldId");

                    b.HasIndex("UserId");

                    b.HasIndex("DepartmentId", "Name")
                        .IsUnique()
                        .HasName("UNameSkill_Department");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("EntitiesAdmin.Data.Entities.StatusEmployees", b =>
                {
                    b.Property<int>("StatusEmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("EditionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("StatusFieldId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("StatusEmployeeId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UNameStatusEmployee");

                    b.HasIndex("StatusFieldId");

                    b.HasIndex("UserId");

                    b.ToTable("StatusEmployees");
                });

            modelBuilder.Entity("EntitiesAdmin.Data.Entities.StatusFields", b =>
                {
                    b.Property<int>("StatusFieldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("StatusFieldId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UNameStatusField");

                    b.ToTable("StatusFields");
                });

            modelBuilder.Entity("EntitiesAdmin.Data.Entities.StatusRequest", b =>
                {
                    b.Property<int>("StatusRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EditionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("StatusFieldId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("StatusRequestId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UNameStatusRequest");

                    b.HasIndex("StatusFieldId");

                    b.HasIndex("UserId");

                    b.ToTable("StatusRequest");
                });

            modelBuilder.Entity("EntitiesAdmin.Data.Entities.TypeRequests", b =>
                {
                    b.Property<int>("TypeRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("RequestCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("StatusFieldId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TypeRequestId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("RequestCategoryId");

                    b.HasIndex("StatusFieldId");

                    b.HasIndex("UserId");

                    b.HasIndex("DepartmentId", "Name")
                        .IsUnique()
                        .HasName("UNameDepartmantTypeRequest")
                        .HasFilter("[DepartmentId] IS NOT NULL AND [Name] IS NOT NULL");

                    b.ToTable("TypeRequests");
                });

            modelBuilder.Entity("EntitiesAdmin.Data.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("EntitiesAdmin.Data.Entities.Countries", b =>
                {
                    b.HasOne("EntitiesAdmin.Data.Entities.StatusFields", "StatusField")
                        .WithMany("Countries")
                        .HasForeignKey("StatusFieldId");

                    b.HasOne("EntitiesAdmin.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("EntitiesAdmin.Data.Entities.Departments", b =>
                {
                    b.HasOne("EntitiesAdmin.Data.Entities.Rosters", "Roster")
                        .WithMany("Departments")
                        .HasForeignKey("RosterId")
                        .IsRequired();

                    b.HasOne("EntitiesAdmin.Data.Entities.StatusFields", "StatusField")
                        .WithMany("Departments")
                        .HasForeignKey("StatusFieldId");

                    b.HasOne("EntitiesAdmin.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("EntitiesAdmin.Data.Entities.Employees", b =>
                {
                    b.HasOne("EntitiesAdmin.Data.Entities.Countries", "Country")
                        .WithMany("Employees")
                        .HasForeignKey("CountryId");

                    b.HasOne("EntitiesAdmin.Data.Entities.JobPositions", "JobPosition")
                        .WithMany("Employees")
                        .HasForeignKey("JobPositionId");

                    b.HasOne("EntitiesAdmin.Data.Entities.Site", "Site")
                        .WithMany("Employees")
                        .HasForeignKey("SiteId");

                    b.HasOne("EntitiesAdmin.Data.Entities.Skills", "Skill")
                        .WithMany("Employees")
                        .HasForeignKey("SkillId");

                    b.HasOne("EntitiesAdmin.Data.Entities.StatusEmployees", "StatusEmployee")
                        .WithMany("Employees")
                        .HasForeignKey("StatusEmployeeId");
                });

            modelBuilder.Entity("EntitiesAdmin.Data.Entities.JobPositions", b =>
                {
                    b.HasOne("EntitiesAdmin.Data.Entities.StatusFields", "StatusField")
                        .WithMany("JobPositions")
                        .HasForeignKey("StatusFieldId");

                    b.HasOne("EntitiesAdmin.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("EntitiesAdmin.Data.Entities.RequestCategories", b =>
                {
                    b.HasOne("EntitiesAdmin.Data.Entities.StatusFields", "StatusField")
                        .WithMany("RequestCategories")
                        .HasForeignKey("StatusFieldId");

                    b.HasOne("EntitiesAdmin.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("EntitiesAdmin.Data.Entities.Requests", b =>
                {
                    b.HasOne("EntitiesAdmin.Data.Entities.StatusRequest", "StatusRequest")
                        .WithMany("Requests")
                        .HasForeignKey("StatusRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntitiesAdmin.Data.Entities.TypeRequests", "TypeRequest")
                        .WithMany("Requests")
                        .HasForeignKey("TypeRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntitiesAdmin.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EntitiesAdmin.Data.Entities.Rosters", b =>
                {
                    b.HasOne("EntitiesAdmin.Data.Entities.StatusFields", "StatusField")
                        .WithMany("Rosters")
                        .HasForeignKey("StatusFieldId");

                    b.HasOne("EntitiesAdmin.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("EntitiesAdmin.Data.Entities.Site", b =>
                {
                    b.HasOne("EntitiesAdmin.Data.Entities.Countries", "Country")
                        .WithMany("Site")
                        .HasForeignKey("CountryId");

                    b.HasOne("EntitiesAdmin.Data.Entities.StatusFields", "StatusField")
                        .WithMany("Site")
                        .HasForeignKey("StatusFieldId");

                    b.HasOne("EntitiesAdmin.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("EntitiesAdmin.Data.Entities.Skills", b =>
                {
                    b.HasOne("EntitiesAdmin.Data.Entities.Departments", "Department")
                        .WithMany("Skills")
                        .HasForeignKey("DepartmentId")
                        .IsRequired();

                    b.HasOne("EntitiesAdmin.Data.Entities.StatusFields", "StatusField")
                        .WithMany("Skills")
                        .HasForeignKey("StatusFieldId");

                    b.HasOne("EntitiesAdmin.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("EntitiesAdmin.Data.Entities.StatusEmployees", b =>
                {
                    b.HasOne("EntitiesAdmin.Data.Entities.StatusFields", "StatusField")
                        .WithMany("StatusEmployees")
                        .HasForeignKey("StatusFieldId");

                    b.HasOne("EntitiesAdmin.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("EntitiesAdmin.Data.Entities.StatusRequest", b =>
                {
                    b.HasOne("EntitiesAdmin.Data.Entities.StatusFields", "StatusField")
                        .WithMany("StatusRequest")
                        .HasForeignKey("StatusFieldId");

                    b.HasOne("EntitiesAdmin.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("EntitiesAdmin.Data.Entities.TypeRequests", b =>
                {
                    b.HasOne("EntitiesAdmin.Data.Entities.Departments", "Department")
                        .WithMany("TypeRequests")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("EntitiesAdmin.Data.Entities.RequestCategories", "RequestCategory")
                        .WithMany("TypeRequests")
                        .HasForeignKey("RequestCategoryId");

                    b.HasOne("EntitiesAdmin.Data.Entities.StatusFields", "StatusField")
                        .WithMany("TypeRequests")
                        .HasForeignKey("StatusFieldId");

                    b.HasOne("EntitiesAdmin.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("EntitiesAdmin.Data.Entities.User", b =>
                {
                    b.HasOne("EntitiesAdmin.Data.Entities.Employees", "Employee")
                        .WithMany("User")
                        .HasForeignKey("EmployeeId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EntitiesAdmin.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EntitiesAdmin.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntitiesAdmin.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EntitiesAdmin.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
